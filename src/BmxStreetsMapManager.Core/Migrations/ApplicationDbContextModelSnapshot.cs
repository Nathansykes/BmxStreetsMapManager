// <auto-generated />
using System;
using BmxStreetsMapManager.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BmxStreetsMapManager.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("BmxStreetsMapManager.Core.Data.Models.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModIOId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModIOName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModIOVersion")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("BmxStreetsMapManager.Core.Data.Models.MapProfiles", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.HasKey("ProfileId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("MapProfiles");
                });

            modelBuilder.Entity("BmxStreetsMapManager.Core.Data.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("BmxStreetsMapManager.Core.Data.Models.UserConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModIOApiToken")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserConfig");
                });

            modelBuilder.Entity("BmxStreetsMapManager.Core.Data.Models.MapProfiles", b =>
                {
                    b.HasOne("BmxStreetsMapManager.Core.Data.Models.Map", "Map")
                        .WithMany("MapProfiles")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BmxStreetsMapManager.Core.Data.Models.Profile", "Profile")
                        .WithMany("MapProfiles")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("BmxStreetsMapManager.Core.Data.Models.Map", b =>
                {
                    b.Navigation("MapProfiles");
                });

            modelBuilder.Entity("BmxStreetsMapManager.Core.Data.Models.Profile", b =>
                {
                    b.Navigation("MapProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
